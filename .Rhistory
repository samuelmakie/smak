sepp <- "_"
paste(data$ofsted_phase, data$ofsted_region, sep = sepp)
n <- lapply(var, FUN = function(var){paste0("paste0(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
n
paste0("list(", paste(n, collapse = ", "), ")"))
paste0("list(", paste(n, collapse = ", "), ")")
eval(parse(text = paste0("list(", paste(n, collapse = ", "), ")")))
n
paste0(data$ofsted_phase, data$ofsted_region, sep = sepp)
paste(data$ofsted_phase, data$ofsted_region, sep = sepp)
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
eval(parse(text = paste0("list(", paste(n, collapse = ", "), ")")))
data <- son_sep_23_2
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(n, collapse = ", "), ")")))
data
m
paste0("list(", paste(n, collapse = ", "), ")"))
paste0("list(", paste(n, collapse = ", "), ")")
list(paste(data$ofsted_phase, data$ofsted_region, sep = sepp), paste(data$overall_effectiveness, data$safeguarding_is_effective, sep = sepp))
l
m
list(paste(son_sep_23_2$ofsted_phase, son_sep_23_2$ofsted_region, sep = ""),
paste(son_sep_23_2$total_number_of_pupils, son_sep_23_2$safeguarding_is_effective, sep = ""))
list(factor(paste(son_sep_23_2$ofsted_phase, son_sep_23_2$ofsted_region, sep = "")),
paste(son_sep_23_2$total_number_of_pupils, son_sep_23_2$safeguarding_is_effective, sep = ""))
aiai <- list(factor(paste(son_sep_23_2$ofsted_phase, son_sep_23_2$ofsted_region, sep = "_")),
paste(son_sep_23_2$total_number_of_pupils, son_sep_23_2$safeguarding_is_effective, sep = ""))
aiai |> str()
aiai[[1]]
aiai[[1]] |> levels()
m
m[[1]]
aiai <- list(factor(paste(son_sep_23_2$ofsted_phase, son_sep_23_2$ofsted_region, sep = "_"), m[[1]]),
paste(son_sep_23_2$total_number_of_pupils, son_sep_23_2$safeguarding_is_effective, sep = ""))
aiai[[1]] |> levels()
paste0("list(", paste(n, collapse = ", "), ")")
n
n <- lapply(var, FUN = function(var){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
n
# Ordered combinations
m <- lapply(l, FUN = function(l, m){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp), ", m)))})
# Ordered combinations
m <- lapply(l,m, FUN = function(l, m){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp), ", m)))})
# Ordered combinations
m <- lapply(l,m, FUN = function(l, m){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp), ")))})
# Ordered combinations
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
m
# Ordered combinations
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m)})
n <- lapply(var, m FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m)})
n <- lapply(var, m ,FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m)})
n
n <- lapply(var, m ,FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m, ")")})
n
n <- lapply(c(var, m) ,FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m, ")")})
n <- lapply(var, m ,FUN = function(var, m){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)", m, ")")})
n
n <- lapply(var, FUN = function(var){paste0("factor(paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
n
lapply(n, function(m){paste("factor(", n, ",", m)})
n
lapply(n, function(m){paste("factor(", n, ",", m)})
paste()n[[1]]
paste(n[[1]])
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
paste(n[[1]])
lapply(n, function(m){paste("factor(", n, ",", m)})
paste(n[[1]])
paste0("factor(",paste(n[[1]]))
paste0("factor(",paste(n[[1]]), m[[1]])
paste(n[[1]])
paste("factor(",paste(n[[1]]), m[[1]])
m[[1]]
paste("factor(",paste(n[[1]]))
paste(m[[1]])
paste(m[[1]], collapse = ",")
paste(m[[1]], sep = "")
m[[1]]
cat(m[[1]])
paste(m[[1]])
k
l
m
n
paste(m[[1]], sep = ",")
n
lapply(n, function(m){paste("factor(", n, ",", m)})
toString(m[[1]])
n
paste("factor(",paste(n[[1]]))
n
paste(n[[1]])
paste("factor(", paste(n[[1]]), ")")
paste("factor(", paste(n[[1]]), m[[1]],")")
paste("factor(", paste(n[[1]]), paste0(m[[1]]),")")
paste0(m[[1]])
paste("factor(", paste(n[[1]]), paste(m[[1]], collapse = ","),")")
paste(m[[1]], collapse = ",")
paste("'",m[[1]],"'", collapse = ",")
paste0("'",m[[1]],"'", collapse = ",")
paste("factor(", paste(n[[1]]), paste0("'",m[[1]],"'", collapse = ","),")")
paste0("factor(", paste(n[[1]]), paste0("'",m[[1]],"'", collapse = ","),")")
lapply(n, m, FUN = paste0("factor(", paste(n), paste0("'",m,"'", collapse = ","),")"))
lapply(n, m, FUN = function()paste0("factor(", paste(n), paste0("'",m,"'", collapse = ","),")"))
lapply(n, m, FUN = function(n, m)paste0("factor(", paste(n), paste0("'",m,"'", collapse = ","),")"))
data
data[, c(names(var))]
m
apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
data[, c(names(var))]  <- apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
data
apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
data[, c(names(var))]  <- list(apply(data[, c(names(var))], 2, FUN = function(m)factor(m)))
data
data
list(apply(data[, c(names(var))], 2, FUN = function(m)factor(m)))
data <- son_sep_23_2
apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
k <- lapply(var,FUN = function(x)unique(data[,c(x)]))
l <- lapply(k, FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
# Ordered combinations
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(n, collapse = ", "), ")")))
apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
apply(data[, c(names(var))], 2, FUN = function(m)factor(m)) |> as.list()
apply(data[, c(names(var))], 2, FUN = function(m)factor(m)) |> t()
apply(data[, c(names(var))], 2, FUN = function(m)factor(m))
data
data[, c(names(var))]
data[, c(names(var))]
factor(data[, c(names(var))])
m
factor(data[, c(names(var))], m)
data[, c(names(var))] <- factor(data[, c(names(var))], m)
data[, c(names(var))],
data[, c(names(var))]
apply(data[, c(names(var))])
apply(data[, c(names(var))], FUN = function())
apply(data[, c(names(var))], FUN = function(){})
apply(data[, c(names(var))], 2, FUN = function(){})
apply(data[, c(names(var))], 2, FUN = function(){"1"})
apply(data[, c(names(var))], 2, FUN = function(x){"1"})
data[, c(names(var))] <- lapply(data[, c(names(var))], factor)
data
data[, c(names(var))] <- lapply(data[, c(names(var))], FUN = function(m){levels(m)})
data[, c(names(var))]
data
data[, c(names(var[[1]]))]
data[, c(names(var))]
data[, c(names(var[1]))]
m
data[, c(names(var[1]))] <- factor(data[, c(names(var[1]))], m[[1]])
data
m[[1]]
data
m[[1]]
factor(data[, c(names(var[1]))], m[[1]])
data$new_variable_1 |> levels9
data$new_variable_1 |> levels()
data
data[, c(names(var[1]))]
data[, c(names(var[[1]]))] <- factor(data[, c(names(var[1]))], m[[1]])
data <- son_sep_23_2
# Get combo
var
k <- lapply(var,FUN = function(x)unique(data[,c(x)]))
l <- lapply(k, FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
# Ordered combinations
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(n, collapse = ", "), ")")))
data[, c(names(var))] <- lapply(data[, c(names(var))], factor)
data
data[, c(names(var[[1]]))]
var
var[1])
var[1]
names(var[1])
data[, c(names(var[1]))]
data[[, c(names(var[1]))]]
var[1]
names(var)[1])
names(var)[1]
data[, c(names(var)[1])]
levels(data[, c(names(var)[1])]) <- m[[1]]
data
data$new_variable_1 |> levels()
levels(data[, c(names(var)[1])])
data[, c(names(var)[1])]
m
var
# Get ordered combinations
k <- lapply(var,FUN = function(x)unique(data[,c(x)]))
k
l <- lapply(k, FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
l
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
m
l
n
k <- lapply(var,FUN = function(x)unique(data[,c(x)]))
l <- lapply(k, FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
m <- lapply(l, FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
k
data[,c(var)]
data[,c(var[[1]])]
expand.grid(data[,c(var[[1]])])
k
# Get ordered combinations
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
# Get ordered combinations
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
# Get ordered combinations
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
lapply(var,FUN = function(x)unique(data[,c(x)]))
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))})
# Get ordered combinations
# Unique combinations
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
n
paste0(n[[1]])
n
# Get ordered combinations
# Unique combinations
m <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
paste0(n[[1]], m[[1]])
m[[1]]
paste0(m[[1]], collapse = ",")
paste0("'",m[[1]],"'", collapse = ",")
paste0(n[[1]], paste0("'",m[[1]],"'", collapse = ","))
paste0("factor(", paste0(n[[1]], paste0("'",m[[1]],"'", collapse = ",")))
paste0("factor(", paste0(n[[1]], ",",paste0("'",m[[1]],"'", collapse = ",")), ")")
paste0("factor(", paste0(n[[1]], ",",paste0("'",m[[1]],"'", collapse = ", c(")), "))")
paste0("factor(", paste0(n[[1]], ",",paste0("'",m[[1]],"'", collapse = ",")), ")")
paste0("'",m[[1]]
paste0("'",m[[1]])
paste0("'",m[[1]])
paste0("'",m[[1]], collapse = ",")
paste0("c(", paste0("'",m[[1]], collapse = ","), ")")
paste0("factor(", paste0(n[[1]], ",",paste0("c(", paste0("'",m[[1]], collapse = ","), ")")), ")")
paste0("factor(", paste0(n[[1]], ", ",paste0("c(", paste0("'",m[[1]], collapse = ","), ")")), ")")
paste0("c(", paste0("'",m[[1]], collapse = ","), ")")
factor_adjust <- lapply(m, function(m){paste0("c(", paste0("'",m, collapse = ","), ")")})
factor_adjust
n
factor_adjust
paste(n, factor_adjust)
factor_levels <- lapply(m, function(m){paste0("c(", paste0("'",m, collapse = ","), ")")})
paste(n, factor_levels)
paste(n, ",",factor_levels)
paste("factor(",n, ",",factor_levels)
paste("factor(",n, ",",factor_levels, ")")
paste0("factor(",n, ",",factor_levels, ")")
paste(paste0("factor(", paste0(n[[1]], ", ",paste0("c(", paste0("'",m[[1]], collapse = ","), ")")), ")"), collapse = ",")
paste0("factor(",n, ",",factor_levels, ")")
paste0("factor(",n, ",",factor_levels, ")")
paste0("factor(", paste0(n[[1]], ", ",paste0("c(", paste0("'",m[[1]], collapse = ","), ")")), ")")
paste0("factor(",n, ",",factor_levels, ")")
paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ",")
paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", ")
paste("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")))
paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")))
paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
factor_levels
factor_levels <- lapply(m, function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")))
data
lapply(m, function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")}) |> paste0("list(", paste(paste0("factor(",n, ",",factor_levels, ")"), collapse  = ", "), ")")
# Get ordered combinations
# Unique combinations
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
factor_levels <- lapply(m, function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
# Get ordered combinations
# Unique combinations
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))}) |>
lapply(m, function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
# Get ordered combinations
# Unique combinations
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
unique_combination_ordered
apply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
paste0("paste(", paste0(paste0("l$", names(l[[1]])), collapse = ", "), ", sep = sepp)")
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
paste0("paste(", paste0(paste0("l$", names(l[[1]])), collapse = ", "), ", sep = sepp)")
paste(l$ofsted_phase, l$ofsted_region, sep = sepp)
l
paste(l[[1]]$ofsted_phase, l[[1]]$ofsted_region, sep = sepp)
paste0("c(", paste0("'", paste(l[[1]]$ofsted_phase, l[[1]]$ofsted_region, sep = sepp), "'",collapse = ","), ")")
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("c(", paste0("'",paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)"), "'",collapse = ","), ")")))})
paste(l[[1]]$ofsted_phase, l[[1]]$ofsted_region, sep = sepp)
paste0("c(", paste0("'",paste(l[[1]]$ofsted_phase, l[[1]]$ofsted_region, sep = sepp),  "'",collapse = ","), ")")
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text = paste0("c(", paste0("'", paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)"), "'",collapse = ","), ")")))})
apply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))})
# Get ordered combinations
# Unique combinations
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
unique_combination_ordered
lapply(var,FUN = function(x)unique(data[,c(x)]))
unique_combination_ordered
data <- son_sep_23_2
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
# Manipulate the data
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
# Change factor levels
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",unique_combination_ordered, ")"), collapse  = ", "), ")")))
data
# Arguments
# Groups of variables to be combined
# Name of new variables
# Whether old variables are deleted
#
var <- list(new_variable_1 = c('ofsted_phase', 'ofsted_region'), new_variable_2 = c('overall_effectiveness', 'safeguarding_is_effective', "total_number_of_pupils"))
data <- son_sep_23_2
# Get ordered combinations
# Unique combinations
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sepp)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
# Manipulate the data
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sepp)")})
# Change factor levels
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",unique_combination_ordered, ")"), collapse  = ", "), ")")))
data
n
comb_vars <- function(data, var, sep = " "){
# Change variables to factors and relevel them
## Unique combinations in order
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sep)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
# Manipulate the data
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sep)")})
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",unique_combination_ordered, ")"), collapse  = ", "), ")")))
return(data)
}
comb_vars(son_sep_23_2, list(phase_region = c('ofsted_phase', 'ofsted_region'), oe_safeguarding_size = c('overall_effectiveness', 'safeguarding_is_effective', "total_number_of_pupils")))
var |> unlist()
data[, -c(unlist(var))]
c(unlist(var))
paste(unlist(var), collapse = ",")
data[, -c(unlist(var)[1])]
data[, -c(unlist(var)[[1]])]
data[,!unlist(var)]
c(unlist(var))
data[,!(names(data) %in% c(unlist(var)))]
data[,!(names(data) %in% unlist(var))]
comb_vars <- function(data, var, sep = " ", drop = F){
# Change variables to factors and relevel them
## Unique combinations in order
unique_combination_ordered <- lapply(var,FUN = function(x)unique(data[,c(x)])) |>
# Ordered unique combinations
lapply(FUN = function(k){eval(parse(text = paste0("k[order(",paste0("k$", names(k), collapse = ", "), "),]")))}) |>
#Combine names
lapply(FUN = function(l){eval(parse(text= paste0("paste(", paste0(paste0("l$", names(l)), collapse = ", "), ", sep = sep)")))}) |>
lapply(FUN = function(m){paste0("c(", paste0("'",m, "'",collapse = ","), ")")})
# Manipulate the data
n <- lapply(var, FUN = function(var){paste0("paste(", paste0( paste0("data$", var), collapse = ", "), ", sep = sep)")})
data[, c(names(var))] <- eval(parse(text = paste0("list(", paste(paste0("factor(",n, ",",unique_combination_ordered, ")"), collapse  = ", "), ")")))
#Drop old columns depending on user
if(drop){
data <- data[,!(names(data) %in% unlist(var))]
}
return(data)
}
comb_vars(son_sep_23_2, list(phase_region = c('ofsted_phase', 'ofsted_region'), oe_safeguarding_size = c('overall_effectiveness', 'safeguarding_is_effective', "total_number_of_pupils")))
comb_vars(son_sep_23_2, list(phase_region = c('ofsted_phase', 'ofsted_region'), oe_safeguarding_size = c('overall_effectiveness', 'safeguarding_is_effective', "total_number_of_pupils")), drop = T)
use_r("comb_vars")
library(smak)
library(smak)
library(smak)
?smak::comb_vars()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
class(son_sep_23)
library(smak)
?smak::comb_vars
library(smak)
?smak::comb_vars
library(smak)
git push -u origin main
use_r("as_annum")
library(devtools)
use_r("as_annum")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
as_annum <- function(date, from = "09-01", sep = " ", format = "%Y"){
annum_ending <- as.numeric(format(date, format)) + as.integer(date >= as.Date(paste0(format(date, "%Y"), "-", from), format = "%Y-%m-%d"))
output <- paste0(annum_ending - 1, sep, annum_ending)
output[which(is.na(date))] <- NA
return(output)
}
son_sep_23_2
#Make some data
son_sep_23 <- readr::read_csv("https://assets.publishing.service.gov.uk/media/65265dd7aea2d0000d219b3e/Management_information_-_state-funded_schools_-_latest_inspections_at_30_Sep_2023.csv") |> janitor::clean_names() |> as_tibble()
son_sep_23_2 <- son_sep_23 |>
select(ofsted_phase, ofsted_region, total_number_of_pupils, overall_effectiveness, publication_date, safeguarding_is_effective) |>
mutate(ofsted_phase = factor(ofsted_phase, c("Nursery", "Primary", "Secondary", "PRU", "Special")),
ofsted_region = as.character(ofsted_region),
total_number_of_pupils = as.numeric(total_number_of_pupils),
overall_effectiveness = as.character(overall_effectiveness),
publication_date = as.Date(publication_date, tryFormats = "%d/%m/%Y"),
safeguarding_is_effective = ifelse(safeguarding_is_effective == "Yes", T, F))
#Replace some values with NA
{son_sep_23_2$ofsted_phase[sample(nrow(son_sep_23_2), size = 100)] <- NA
son_sep_23_2$overall_effectiveness[sample(nrow(son_sep_23_2), size = 100)] <- NA
son_sep_23_2$ofsted_region[sample(nrow(son_sep_23_2), size = 100)] <- NA
son_sep_23_2$total_number_of_pupils[sample(nrow(son_sep_23_2), size = 100)] <- NA
son_sep_23_2$publication_date[sample(nrow(son_sep_23_2), size = 100)] <- NA
son_sep_23_2$safeguarding_is_effective[sample(nrow(son_sep_23_2), size = 100)] <- NA}
as_annum(son_sep_23_2$publication_date)
son_sep_23_2 |> mutate(year = as_annum(publication_date))
library(smak)
devtools::load_all(".")
rm(list = c("as_annum"))
devtools::load_all(".")
devtools::document(roclets = c("rd", "collate", "namespace"))
devtools::load_all(".")
library(smak)
